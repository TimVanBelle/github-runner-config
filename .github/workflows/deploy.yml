name: Deploy to Hostinger VPS

on:
  push:
    branches:
      - main
  workflow_dispatch:  # Allow manual triggers

env:
  PORTAINER_URL: ${{ secrets.PORTAINER_URL }}       # Your Portainer instance URL
  PORTAINER_USERNAME: ${{ secrets.PORTAINER_USERNAME }}
  PORTAINER_PASSWORD: ${{ secrets.PORTAINER_PASSWORD }}
  STACK_NAME: ${{ secrets.STACK_NAME }}             # Your stack name in Portainer

jobs:
  deploy:
    runs-on: self-hosted  # Uses your self-hosted runner

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Portainer
        id: login
        run: |
          # Get Portainer JWT token
          TOKEN=$(curl -s -X POST \
            -H "Content-Type: application/json" \
            -d "{\"username\":\"$PORTAINER_USERNAME\",\"password\":\"$PORTAINER_PASSWORD\"}" \
            "$PORTAINER_URL/api/auth" | jq -r .jwt)
          echo "PORTAINER_JWT=$TOKEN" >> $GITHUB_ENV

      - name: Get Stack ID
        id: stack
        run: |
          # Get stack ID based on stack name
          STACK_ID=$(curl -s \
            -H "Authorization: Bearer ${{ env.PORTAINER_JWT }}" \
            "$PORTAINER_URL/api/stacks" | \
            jq -r ".[] | select(.Name==\"$STACK_NAME\") | .Id")
          echo "STACK_ID=$STACK_ID" >> $GITHUB_ENV

      - name: Update Stack
        run: |
          # Check if docker-compose.yml exists
          if [ ! -f "docker-compose.yml" ]; then
            echo "Error: docker-compose.yml not found!"
            exit 1
          fi

          # Encode docker-compose file content
          STACK_CONTENT=$(cat docker-compose.yml | base64 -w 0)

          # Update the stack
          curl -X PUT \
            -H "Authorization: Bearer ${{ env.PORTAINER_JWT }}" \
            -H "Content-Type: application/json" \
            -d "{
              \"stackFileContent\": \"$STACK_CONTENT\",
              \"prune\": true,
              \"pullImage\": true
            }" \
            "$PORTAINER_URL/api/stacks/${{ env.STACK_ID }}?endpointId=1"

      - name: Verify Deployment
        run: |
          # Wait for deployment to stabilize
          sleep 30

          # Check stack status
          STACK_STATUS=$(curl -s \
            -H "Authorization: Bearer ${{ env.PORTAINER_JWT }}" \
            "$PORTAINER_URL/api/stacks/${{ env.STACK_ID }}" | \
            jq -r .Status)

          if [ "$STACK_STATUS" != "1" ]; then
            echo "Stack deployment failed! Status: $STACK_STATUS"
            exit 1
          fi

          echo "Deployment successful!"